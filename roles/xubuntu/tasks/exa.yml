---
- name: Exa | Check if is present
  stat:
    path: /usr/local/bin/exa
  register: exa_bin_path

- name: Exa | Check avaliable version
  command: /usr/local/bin/exa -v
  register: exa_local_version
  ignore_errors: true

- name: Exa | Register local version
  set_fact:
    exa_local_version: "{{ exa_local_version.stdout | regex_findall('(\\d+\\.\\d+\\.\\d+)') | first }}"
  when: exa_local_version.rc == 0

- name: Exa | Recover all releases
  uri:
    url: https://api.github.com/repos/ogham/exa/releases
    return_content: true
    body_format: json
    headers:
      Authorization: "token {{ GH_TOKEN }}"
  retries: 3
  register: exa_releases_response

- name: Exa | Get latest version URL
  set_fact:
    exa_download_url: "{{ exa_releases_response.content | from_json | first | json_query('assets[?starts_with(name, `exa-linux-x86_64-v`) && ends_with(name, `.zip`)].browser_download_url') | first }}"

- name: Exa | Set latest remote version
  set_fact:
    exa_remote_version: "{{ exa_download_url | regex_findall('(\\d+\\.\\d+\\.\\d+)') | first }}"

- name:  Exa | Get the zip file
  when: exa_remote_version != exa_local_version or exa_bin_path.stat.exists == false
  get_url:
    url: "{{ exa_download_url }}"
    dest: "/tmp"

- name: Exa | Install or Upgrade
  when: exa_remote_version != exa_local_version or exa_bin_path.stat.exists == false
  block:
    - name: Exa | Get and unarchive the binary
      shell: "unzip -j -o /tmp/{{ exa_download_url | basename }} bin/exa -d /usr/local/bin"
      args:
        warn: false
      become: true
      retries: 3
