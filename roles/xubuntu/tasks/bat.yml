- name: Bat | Check if is present
  stat:
    path: /usr/bin/bat
  register: bat_bin_path

- name: Bat | Check avaliable version
  command: /usr/bin/bat --version
  register: bat_bin_version
  ignore_errors: true

- name: Bat | Register local version
  set_fact:
    bat_local_version: "{{ bat_bin_version.stdout | regex_findall('(\\d+\\.\\d+\\.\\d+)') | first }}"
  when: bat_bin_version.rc == 0

- name: Bat | Register local version
  set_fact:
    bat_local_version: ""
  when: bat_bin_version.rc != 0

- name: Bat | Recover all releases
  uri:
    url: https://api.github.com/repos/sharkdp/bat/releases
    return_content: true
    body_format: json
  retries: 3
  register: bat_releases_response

- name: Bat | Get latest version URL
  set_fact:
    bat_download_url: "{{ bat_releases_response.content | from_json | first | json_query('assets[?starts_with(name, `bat_`) && ends_with(name, `_amd64.deb`)].browser_download_url') | first }}"

- name: Bat | Set latest remote version
  set_fact:
    bat_remote_version: "{{ bat_download_url | regex_findall('(\\d+\\.\\d+\\.\\d+)') | first }}"

- name: Bat | Install deb file
  apt:
    deb: "{{ bat_download_url }}"
    force_apt_get: yes
  retries: 3
  become: true
  when: (bat_local_version is defined and bat_local_version != bat_remote_version) or bat_bin_path.stat.exists == false
